/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 19:27:30 GMT 2019
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.CombinedCompilerPass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Level;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.toSourceArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Node node0 = compiler0.parseTestCode("_)$>S_'");
      compiler0.toSource(compiler_CodeBuilder0, 3282, node0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      // Undeclared exception!
      try {
        compiler0.toSourceArray((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.resetUniqueNameId();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("At least one module must be provided");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
      assertTrue(jSSourceFile0.isExtern());
      
      compiler0.removeExternInput((InputId) null);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test07()  throws Throwable  {
      Level level0 = Level.FINEST;
      Compiler.setLoggingLevel(level0);
      assertEquals("FINEST", level0.getName());
  }

  @Test
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("SINGLELINE");
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      // Undeclared exception!
      try {
        compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertTrue(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      compiler0.setState(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("__(A", " JOU");
      // Undeclared exception!
      try {
        compiler0.optimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      // Undeclared exception!
      try {
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.disableThreads();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.getInputsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = compiler0.precheck();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = Compiler.getReleaseDate();
      assertEquals("2019/05/25 12:24", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("_)$>S_'");
      compiler0.check();
      DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.createPassConfigInternal();
      // Undeclared exception!
      try {
        compiler0.setPassConfig((PassConfig) defaultPassConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // this.passes has already been assigned
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getPropertyMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = Compiler.getReleaseVersion();
      assertEquals("svnversion: warning: cannot set LC_CTYPE locale\nsvnversion: warning: environment variable LC_CTYPE is UTF-8\nsvnversion: warning: please check that your locale name is correct\nUnversioned directory", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.ensureLibraryInjected("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wgyG\"nwU71g]^`");
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) mockPrintStream0);
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      // Undeclared exception!
      try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getVariableMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getFunctionalInformationMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N<p0D", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      // Undeclared exception!
      try {
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VarCheck varCheck0 = null;
      try {
        varCheck0 = new VarCheck(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.getExternsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getGlobalVarReferences();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.toSource((Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build without root node being specified
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getModuleGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("compiler.date", "s#6:Q%uu%#|j&6.[", "compiler.date");
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) sourceFile_Preloaded0, compilerOptions0);
      assertTrue(sourceFile_Preloaded0.isExtern());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      // Undeclared exception!
      try {
        compiler0.isTypeCheckingEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getInputsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
      compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.getInputsById();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setHasRegExpGlobalReferences(true);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getExternsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getTopScope();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try {
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLength();
      assertEquals(0, int0);
  }

  @Test
  public void test47()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = compiler_CodeBuilder0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test48()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLineIndex();
      assertEquals(0, int0);
  }

  @Test
  public void test49()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }

  @Test
  public void test50()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.reset();
      assertEquals("", compiler_CodeBuilder0.toString());
  }

  @Test
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      Vector<JSModule> vector1 = new Vector<JSModule>(141);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) vector1, compilerOptions0);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.createPassConfigInternal();
      compiler0.setPassConfig((PassConfig) defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.javascript.jscomp.TypeCheck", "com.google.javascript.jscomp.TypeCheck");
      compiler0.parse((SourceFile) jSSourceFile0);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try {
        compiler0.stripCode(hashSet0, hashSet0, hashSet0, hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
      codeChangeHandler_RecentChange0.reportChange();
      // Undeclared exception!
      try {
        compiler0.newTracer("k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("_)$>S_'");
      // Undeclared exception!
      try {
        compiler0.newExternInput("_)$>S_'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) pipedOutputStream0);
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      compiler0.parseTestCode("K.bQQog98bF:6DM,U(");
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("/'ie9mMLlivqlmh@s", "/'ie9mMLlivqlmh@s", "T/");
      JsAst jsAst0 = new JsAst((SourceFile) sourceFile_Preloaded0);
      // Undeclared exception!
      try {
        compiler0.addNewScript(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("yn_.Svp", "yn_.Svp");
      compiler0.getReverseAbstractInterpreter();
      // Undeclared exception!
      try {
        compiler0.buildKnownSymbolTable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!~li4Y77s`G/z+8", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) mockFileOutputStream0, false);
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      // Undeclared exception!
      try {
        compiler0.getTypeValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      // Undeclared exception!
      try {
        compiler0.parseInputs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test62()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      compiler0.parse();
      assertEquals(1.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test63()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("At least one module must be provided");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
      compiler0.parse();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test64()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("At least one module must be provided");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      compiler0.parse();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test65()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      // Undeclared exception!
      try {
        compiler0.parseTestCode("_)$>0M'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: externs
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("_)$>S_'");
      assertEquals("_)$>S_'", compiler_CodeBuilder1.toString());
  }

  @Test
  public void test67()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("No source location information associated with {0}.\nMost likely a Node has been created with settings the source file and line/column location.  Usually this is done using Node.copyInformationFrom and supplying a Node from the source AST.");
      boolean boolean0 = compiler_CodeBuilder1.endsWith("H^G&6_hqR&Aj_");
      assertFalse(boolean0);
  }

  @Test
  public void test68()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      boolean boolean0 = compiler_CodeBuilder0.endsWith("D>`F/_b");
      assertFalse(boolean0);
  }

  @Test
  public void test69()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("No source location information associated with {0}.\nMost likely a Node has been created with settings the source file and line/column location.  Usually this is done using Node.copyInformationFrom and supplying a Node from the source AST.");
      compiler_CodeBuilder0.append("No source location information associated with {0}.\nMost likely a Node has been created with settings the source file and line/column location.  Usually this is done using Node.copyInformationFrom and supplying a Node from the source AST.");
      boolean boolean0 = compiler_CodeBuilder1.endsWith("No source location information associated with {0}.\nMost likely a Node has been created with settings the source file and line/column location.  Usually this is done using Node.copyInformationFrom and supplying a Node from the source AST.");
      assertTrue(boolean0);
  }

  @Test
  public void test70()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("At least one module must be provided");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
      boolean boolean0 = compiler0.isInliningForbidden();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(boolean0);
  }

  @Test
  public void test71()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.reportCodeChange();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test72()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile("com.google.javascript.jscomp.TypeCheck", (Charset) uS_ASCII0);
      JsAst jsAst0 = new JsAst((SourceFile) sourceFile_OnDisk0);
      // Undeclared exception!
      try {
        jsAst0.getAstRoot((AbstractCompiler) compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test73()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("_)$>S_'");
      Vector<NodeTraversal.Callback> vector0 = new Vector<NodeTraversal.Callback>();
      CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, vector0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) combinedCompilerPass0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = CheckSideEffects.USELESS_CODE_ERROR;
      String[] stringArray0 = new String[7];
      JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, diagnosticType0, stringArray0);
      compiler0.report(jSError0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test74()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try {
        compiler0.throwInternalError("c8jzT-U~uI-J6y$z5", (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // c8jzT-U~uI-J6y$z5
         //
      }
  }

  @Test
  public void test75()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceRegion((String) null, 8298);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test76()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("_)$>S_'");
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test77()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceRegion("W/R\"~Z4l>v", (-2200));
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test78()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSModule jSModule0 = new JSModule("=<&0");
      // Undeclared exception!
      try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root module has no inputs
         //
      }
  }

  @Test
  public void test79()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.init((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
      compiler0.getNodeForCodeInsertion((JSModule) null);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test80()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getAstDotGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test81()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("yn_.Svp", "yn_.Svp");
      compiler0.getErrorManager();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test82()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      Node node0 = Node.newString("iD;");
      // Undeclared exception!
      try {
        compiler0.updateGlobalVarReferences(hashMap0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test83()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wgyG\"nwU71g]^`");
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) mockPrintStream0);
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      // Undeclared exception!
      try {
        compiler0.getSynthesizedExternsInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test84()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      compiler0.setProgress(1595.48746746);
      assertEquals(1.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test85()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setProgress((-761.5096994433466));
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }
}
